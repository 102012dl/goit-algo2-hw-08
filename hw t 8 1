Завдання 1. Реалізація Rate Limiter з використанням алгоритму Sliding Window для обмеження частоти повідомлень у чаті

import random
from typing import Dict
import time
from collections import deque

class SlidingWindowRateLimiter:
    def __init__(self, window_size: int = 10, max_requests: int = 1):
        self.window_size = window_size
        self.max_requests = max_requests
        self.user_message_history: Dict[str, deque] = {}

    def _cleanup_window(self, user_id: str, current_time: float) -> None:
        if user_id not in self.user_message_history:
            return
        window = self.user_message_history[user_id]
        # Видалити всі записи, старші за window_size секунд
        while window and current_time - window[0] > self.window_size:
            window.popleft()
        # Якщо після очищення deque порожній, видалити користувача
        if not window:
            del self.user_message_history[user_id]

    def can_send_message(self, user_id: str) -> bool:
        current_time = time.time()
        self._cleanup_window(user_id, current_time)

        if user_id not in self.user_message_history:
            return True
        return len(self.user_message_history[user_id]) < self.max_requests

    def record_message(self, user_id: str) -> bool:
        current_time = time.time()
        if self.can_send_message(user_id):
            if user_id not in self.user_message_history:
                self.user_message_history[user_id] = deque()
            self.user_message_history[user_id].append(current_time)
            return True
        return False

    def time_until_next_allowed(self, user_id: str) -> float:
        current_time = time.time()
        self._cleanup_window(user_id, current_time)

        if user_id not in self.user_message_history:
            return 0.0

        window = self.user_message_history[user_id]
        if len(window) < self.max_requests:
            return 0.0

        earliest_time = window[0]
        wait_time = self.window_size - (current_time - earliest_time)
        return max(0.0, wait_time)

# Демонстрація роботи
def test_rate_limiter():
    limiter = SlidingWindowRateLimiter(window_size=10, max_requests=1)

    print("\n=== Симуляція потоку повідомлень ===")
    for message_id in range(1, 11):
        user_id = message_id % 5 + 1
        result = limiter.record_message(str(user_id))
        wait_time = limiter.time_until_next_allowed(str(user_id))

        print(f"Повідомлення {message_id:2d} | Користувач {user_id} | "
              f"{'✓' if result else f'× (очікування {wait_time:.1f}с)'}")

        time.sleep(random.uniform(0.1, 1.0))

    print("\nОчікуємо 4 секунди...")
    time.sleep(4)

    print("\n=== Нова серія повідомлень після очікування ===")
    for message_id in range(11, 21):
        user_id = message_id % 5 + 1
        result = limiter.record_message(str(user_id))
        wait_time = limiter.time_until_next_allowed(str(user_id))
        print(f"Повідомлення {message_id:2d} | Користувач {user_id} | "
              f"{'✓' if result else f'× (очікування {wait_time:.1f}с)'}")
        time.sleep(random.uniform(0.1, 1.0))

if __name__ == "__main__":
    test_rate_limiter()





=== Симуляція потоку повідомлень ===
Повідомлення  1 | Користувач 2 | ✓
Повідомлення  2 | Користувач 3 | ✓
Повідомлення  3 | Користувач 4 | ✓
Повідомлення  4 | Користувач 5 | ✓
Повідомлення  5 | Користувач 1 | ✓
Повідомлення  6 | Користувач 2 | × (очікування 7.4с)
Повідомлення  7 | Користувач 3 | × (очікування 7.4с)
Повідомлення  8 | Користувач 4 | × (очікування 7.6с)
Повідомлення  9 | Користувач 5 | × (очікування 7.2с)
Повідомлення 10 | Користувач 1 | × (очікування 6.9с)

Очікуємо 4 секунди...

=== Нова серія повідомлень після очікування ===
Повідомлення 11 | Користувач 2 | ✓
Повідомлення 12 | Користувач 3 | × (очікування 0.1с)
Повідомлення 13 | Користувач 4 | × (очікування 0.6с)
Повідомлення 14 | Користувач 5 | × (очікування 0.5с)
Повідомлення 15 | Користувач 1 | × (очікування 0.5с)
Повідомлення 16 | Користувач 2 | × (очікування 8.3с)
Повідомлення 17 | Користувач 3 | ✓
Повідомлення 18 | Користувач 4 | ✓
Повідомлення 19 | Користувач 5 | ✓
Повідомлення 20 | Користувач 1 | ✓
